"""Description
Prime factors of a positive integer are the prime numbers that divide that integer exactly.

Given an array arr of n integers and a positive integer num.

Let's suppose prime factorization of num is:  pa x qb x rc x .... x zf   ,where p,q,r...z are prime numbers.

Sum of numbers in array arr at indices of prime factors of number num is: a x arr[p] + b x arr[q] + c x arr[r] +...... + f x arr[z].

You are given an array arr of size n and a positive integer num. You are required to calculate the sum of numbers in arr as mentioned above, and print the same.

Note:

If arr is empty, print -1.
If prime factor of num not found as indices, print 0.
Input Format:

The input consists of three lines:

The first line contains an integer, i.e. n.
The second line contains an array arr of length of n.
The third line contains an integer num
The input will be read from the STDIN by the candidates.

Output Format:

Print the sum that was mentioned in the problem statement.

Example:

Input:

6

11 21 32 45 1 23

6

Output:

77

Explanation:

6=21 x 31

sum=1*arr[2]+1*arr[3]=1*32+1*45=77
"""

#Source Code:

def prime_factors(num):
    factors = {}
    for i in range(2,int(num**0.5)+1):
        while num % i == 0:
            factors[i] = factors.get(i,0) + 1
            num //= i
    if num > 1:
        factors[num] = 1
    return factors
def calculate_sum(n,arr,num):
    if not arr:
        return -1
    factors = prime_factors(num)
    total_sum = 0
    for prime,power in factors.items():
        if prime < n :
            total_sum += power * arr[prime]
        else:
            return 0
    return total_sum
n= int(input())
arr = list(map(int,input().split()))
num = int(input())
print(calculate_sum(n,arr,num))
